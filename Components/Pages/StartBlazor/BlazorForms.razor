@page "/blazor-forms"

<div class="col-12 offset-md-2 col-md-8 border">
    <div class="text-center pt-4">
        <h2 class="text-success">Product Form</h2>

        <hr />
    </div>

    <div class="mx-2 px-2">
        <EditForm FormName="ProductCreate" Model="Product" OnValidSubmit="HandleProductCreate">
            <DataAnnotationsValidator />

            @* <ValidationSummary /> - the same as ValidationMessage for each individual input *@

            <div class="form-group py-2">
                Product Name
                <InputText class="form-control" @bind-Value="@Product.Name" />
                <ValidationMessage For="@(() => Product.Name)" />
            </div>

            <div class="form-group py-2">
                Price
                <InputNumber class="form-control" @bind-Value="@Product.Price" />
                <ValidationMessage For="@(() => Product.Price)" />
            </div>

            <div class="form-group py-2">
                Category
                <InputSelect class="form-select" @bind-Value="@Product.Category">
                    @foreach (var category in Enum.GetValues(typeof(Category)))
                    {
                        <option value="@category">@category</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group py-2">
                Is Active
                <InputCheckbox class="mx-2" @bind-Value="@Product.IsActive" />
            </div>

            <div class="form-group py-2">
                Available After
                <InputDate class="form-control" @bind-Value="@Product.AvailableAfter" />
            </div>

            <button type="submit" class="btn btn-primary my-3" style="width: 200px">
                Create Product
            </button>

            <p class="text-success">@(_isProcessing ? "Processing..." : "")</p>
        </EditForm>

        @* <EditForm FormName="ProductCreateTemp" Model="ProductTemp" OnValidSubmit="HandleProductCreateTemp"></EditForm> *@
    </div>

    @if (CreatedProduct is not null)
    {
        <div class="mx-2 pt-4">
            <hr />

            <h2 class="text-success">Product Created</h2>

            <div class="px-4">
                Name: @CreatedProduct.Name <br />
                Price: @CreatedProduct.Price <br />
                Category: @CreatedProduct.Category <br />
                IsActive: @CreatedProduct.IsActive <br />
                Available After: @CreatedProduct.AvailableAfter
            </div>
        </div>
    }
</div>

@code {
    private bool _isProcessing = false;

    private Product? CreatedProduct { get; set; }

    [SupplyParameterFromForm(FormName = "ProductCreate")]
    public Product Product { get; set; } = new Product() { };

    // [SupplyParameterFromForm(FormName = "ProductCreateTemp")]
    // public Product ProductTemp { get; set; } = new Product() { };

    private async Task HandleProductCreate()
    {
        _isProcessing = true;

        CreatedProduct = null;

        await Task.Delay(3000);

        CreatedProduct = Product;
        Product = new();

        _isProcessing = false;
    }

    // private async Task HandleProductCreateTemp()
    // {
    //     _isProcessing = true;

    //     CreatedProduct = null;

    //     await Task.Delay(3000);

    //     CreatedProduct = ProductTemp;
    //     ProductTemp = new();

    //     _isProcessing = false;
    // }
}
